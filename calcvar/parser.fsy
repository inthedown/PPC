%{
open Syntax
%}

/* Lexemes */
%token <int> NUMERAL   // <int> 是类型标注
%token <string> VARIABLE
%token EQUAL
%token PLUS
%token MINUS
%token TIMES
%token DIVIDE
%token UMINUS  // 这个Token不从词法分析器中返回，是用来指定 单目减运算符的优先级
%token LPAREN
%token RPAREN
%token EOF

/* Precedence and associativity 
优先级从上到下，依次递增
*/ 
%left PLUS MINUS  //加法，减法，优先级相同，左结合 ，最低优先级
%left TIMES DIVIDE //乘法，除法，优先级相同，比减法，减法高
%nonassoc UMINUS   //单目减是非结合，最高优先级   
                   //表达式 -2*3 先算 -2再算*3 ，尽管运算结果同，但是语法树不同。

/* Top level rule */
%start toplevel
%type <Syntax.command> toplevel //文法开始符号的类型是Syntax.command

%%

/* Grammar */

toplevel:           //解析完毕后，一行输入的语法树
  |  expression EOF  { Expression $1 } 
                          //编号变量 $1 是 语法节点1 expression的值
                           //花括号里面{}是合法的F# 代码
                           //解析器解析到该语法节点的的动作 
  | VARIABLE EQUAL expression EOF   { Definition ($1, $3) }
;

expression:
  | VARIABLE                            { Variable $1 }
  | NUMERAL                             { Numeral $1 }
  | expression TIMES   expression  { Times ($1, $3) }
  | expression PLUS    expression  { Plus ($1, $3)}
  | expression MINUS   expression  { Minus ($1, $3) }
  | expression DIVIDE  expression  { Divide ($1, $3)}
  | MINUS  expression %prec UMINUS       { Negate $2 } // %prec UMINUS 表示该条产生式规则的优先级
                                                       // 与 UMINUS 相同
  | LPAREN  expression RPAREN            { $2 }
;

// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "parser.fsy"

open Syntax

# 10 "parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | RPAREN
  | LPAREN
  | UMINUS
  | DIVIDE
  | TIMES
  | MINUS
  | PLUS
  | EQUAL
  | VARIABLE of (string)
  | NUMERAL of (int)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_RPAREN
    | TOKEN_LPAREN
    | TOKEN_UMINUS
    | TOKEN_DIVIDE
    | TOKEN_TIMES
    | TOKEN_MINUS
    | TOKEN_PLUS
    | TOKEN_EQUAL
    | TOKEN_VARIABLE
    | TOKEN_NUMERAL
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__starttoplevel
    | NONTERM_toplevel
    | NONTERM_expression

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | RPAREN  -> 1 
  | LPAREN  -> 2 
  | UMINUS  -> 3 
  | DIVIDE  -> 4 
  | TIMES  -> 5 
  | MINUS  -> 6 
  | PLUS  -> 7 
  | EQUAL  -> 8 
  | VARIABLE _ -> 9 
  | NUMERAL _ -> 10 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_RPAREN 
  | 2 -> TOKEN_LPAREN 
  | 3 -> TOKEN_UMINUS 
  | 4 -> TOKEN_DIVIDE 
  | 5 -> TOKEN_TIMES 
  | 6 -> TOKEN_MINUS 
  | 7 -> TOKEN_PLUS 
  | 8 -> TOKEN_EQUAL 
  | 9 -> TOKEN_VARIABLE 
  | 10 -> TOKEN_NUMERAL 
  | 13 -> TOKEN_end_of_input
  | 11 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__starttoplevel 
    | 1 -> NONTERM_toplevel 
    | 2 -> NONTERM_toplevel 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_expression 
    | 5 -> NONTERM_expression 
    | 6 -> NONTERM_expression 
    | 7 -> NONTERM_expression 
    | 8 -> NONTERM_expression 
    | 9 -> NONTERM_expression 
    | 10 -> NONTERM_expression 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 13 
let _fsyacc_tagOfErrorTerminal = 11

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | RPAREN  -> "RPAREN" 
  | LPAREN  -> "LPAREN" 
  | UMINUS  -> "UMINUS" 
  | DIVIDE  -> "DIVIDE" 
  | TIMES  -> "TIMES" 
  | MINUS  -> "MINUS" 
  | PLUS  -> "PLUS" 
  | EQUAL  -> "EQUAL" 
  | VARIABLE _ -> "VARIABLE" 
  | NUMERAL _ -> "NUMERAL" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | RPAREN  -> (null : System.Object) 
  | LPAREN  -> (null : System.Object) 
  | UMINUS  -> (null : System.Object) 
  | DIVIDE  -> (null : System.Object) 
  | TIMES  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | VARIABLE _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUMERAL _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 8us; 65535us; 0us; 2us; 5us; 6us; 16us; 10us; 17us; 11us; 18us; 12us; 19us; 13us; 20us; 14us; 21us; 15us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 5us; 1us; 5us; 6us; 7us; 8us; 1us; 1us; 2us; 2us; 3us; 1us; 2us; 5us; 2us; 5us; 6us; 7us; 8us; 1us; 2us; 1us; 3us; 1us; 4us; 5us; 5us; 5us; 6us; 7us; 8us; 5us; 5us; 6us; 6us; 7us; 8us; 5us; 5us; 6us; 7us; 7us; 8us; 5us; 5us; 6us; 7us; 8us; 8us; 5us; 5us; 6us; 7us; 8us; 9us; 5us; 5us; 6us; 7us; 8us; 10us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 1us; 10us; 1us; 10us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 10us; 12us; 15us; 17us; 23us; 25us; 27us; 29us; 35us; 41us; 47us; 53us; 59us; 65us; 67us; 69us; 71us; 73us; 75us; 77us; |]
let _fsyacc_action_rows = 23
let _fsyacc_actionTableElements = [|4us; 32768us; 2us; 21us; 6us; 20us; 9us; 4us; 10us; 9us; 0us; 49152us; 5us; 32768us; 0us; 3us; 4us; 19us; 5us; 16us; 6us; 18us; 7us; 17us; 0us; 16385us; 1us; 16387us; 8us; 5us; 4us; 32768us; 2us; 21us; 6us; 20us; 9us; 8us; 10us; 9us; 5us; 32768us; 0us; 7us; 4us; 19us; 5us; 16us; 6us; 18us; 7us; 17us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 2us; 16390us; 4us; 19us; 5us; 16us; 2us; 16391us; 4us; 19us; 5us; 16us; 0us; 16392us; 0us; 16393us; 5us; 32768us; 1us; 22us; 4us; 19us; 5us; 16us; 6us; 18us; 7us; 17us; 4us; 32768us; 2us; 21us; 6us; 20us; 9us; 8us; 10us; 9us; 4us; 32768us; 2us; 21us; 6us; 20us; 9us; 8us; 10us; 9us; 4us; 32768us; 2us; 21us; 6us; 20us; 9us; 8us; 10us; 9us; 4us; 32768us; 2us; 21us; 6us; 20us; 9us; 8us; 10us; 9us; 4us; 32768us; 2us; 21us; 6us; 20us; 9us; 8us; 10us; 9us; 4us; 32768us; 2us; 21us; 6us; 20us; 9us; 8us; 10us; 9us; 0us; 16394us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 12us; 13us; 15us; 20us; 26us; 27us; 28us; 29us; 30us; 33us; 36us; 37us; 38us; 44us; 49us; 54us; 59us; 64us; 69us; 74us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 4us; 1us; 1us; 3us; 3us; 3us; 3us; 2us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 16386us; 16387us; 16388us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16394us; |]
let _fsyacc_reductions ()  =    [| 
# 137 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> Syntax.command in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__starttoplevel));
# 146 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "parser.fsy"
                                            Expression _1 
                   )
# 35 "parser.fsy"
                 : Syntax.command));
# 157 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 39 "parser.fsy"
                                                           Definition (_1, _3) 
                   )
# 39 "parser.fsy"
                 : Syntax.command));
# 169 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 43 "parser.fsy"
                                                               Variable _1 
                   )
# 43 "parser.fsy"
                 : 'gentype_expression));
# 180 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "parser.fsy"
                                                               Numeral _1 
                   )
# 44 "parser.fsy"
                 : 'gentype_expression));
# 191 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 45 "parser.fsy"
                                                          Times (_1, _3) 
                   )
# 45 "parser.fsy"
                 : 'gentype_expression));
# 203 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "parser.fsy"
                                                          Plus (_1, _3)
                   )
# 46 "parser.fsy"
                 : 'gentype_expression));
# 215 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 47 "parser.fsy"
                                                          Minus (_1, _3) 
                   )
# 47 "parser.fsy"
                 : 'gentype_expression));
# 227 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_expression in
            let _3 = parseState.GetInput(3) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "parser.fsy"
                                                          Divide (_1, _3)
                   )
# 48 "parser.fsy"
                 : 'gentype_expression));
# 239 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "parser.fsy"
                                                                Negate _2 
                   )
# 49 "parser.fsy"
                 : 'gentype_expression));
# 250 "parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_expression in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "parser.fsy"
                                                                _2 
                   )
# 51 "parser.fsy"
                 : 'gentype_expression));
|]
# 262 "parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 14;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let toplevel lexer lexbuf : Syntax.command =
    engine lexer lexbuf 0 :?> _
